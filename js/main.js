"use strict";(function(){"use strict";function a(a,b){var c=document.createElement("li");c.className=a?"pass":"fail",c.appendChild(document.createTextNode(b)),document.getElementById("results").appendChild(c)}console.log(213),window.onload=function(){a(!0,"The test suite is running."),a(!1,"Fail!")},function(){var b;this.assert=function(a,c){var d=document.createElement("li");return d.className=a?"pass":"fail",d.appendChild(document.createTextNode(c)),b.appendChild(d),a||(d.parentNode.parentNode.className="fail"),d},this.test=function(c,d){b=document.getElementById("results"),b=a(!0,c).appendChild(document.createElement("ul")),d()}}(),window.onload=function(){test("A test.",function(){a(!0,"First assertion completed"),a(!0,"Second assertion completed"),a(!0,"Third assertion completed")}),test("Another test.",function(){a(!0,"First test completed"),a(!0,"Second test completed"),a(!0,"Third test completed")}),test("A third test.",function(){a(null,"fail"),a(5,"pass")})},window.onload=function(){test("Async Test #1",function(){pause(),setTimeout(function(){a(!0,"First test completed"),resume()},1e3)}),test("Async Test #2",function(){pause(),setTimeOut(function(){a(!0,"Second test completed"),resume()},1e3)})};var b="Domo arigato!";a(function(a){return a()}(function(){return b})===b,"The useless function works! "+b)})();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwiYXBwZW5kQ2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsImdldEVsZW1lbnRCeUlkIiwiY29uc29sZSIsImxvZyIsIndpbmRvdyIsIm9ubG9hZCIsImFzc2VydCIsInBhcmVudE5vZGUiLCJ0ZXN0IiwicGF1c2UiLCJzZXRUaW1lb3V0IiwicmVzdW1lIiwic2V0VGltZU91dCJdLCJtYXBwaW5ncyI6ImFBQUMsV0FBWSxDQUNiLGFBU0EsZUFBNkIsQ0FDekIsR0FBSSxHQUFLQSxTQUFTQyxhQUFULENBQXVCLElBQXZCLENBQVQsQ0FDQSxFQUFHQyxTQUFILENBQWUsRUFBUSxNQUFSLENBQWlCLE1BRlAsQ0FHekIsRUFBR0MsV0FBSCxDQUFlSCxTQUFTSSxjQUFULEdBQWYsQ0FIeUIsQ0FJekJKLFNBQVNLLGNBQVQsQ0FBd0IsU0FBeEIsRUFBbUNGLFdBQW5DLEdBQ0gsQ0FWREcsUUFBUUMsR0FBUixDQURRLEdBQ1IsQ0FMYSxDQWlCYkMsT0FBT0MsTUFBUCxDQUFnQixVQUFXLENBQ3ZCLEtBQWEsNEJBQWIsQ0FEdUIsQ0FFdkIsS0FBYyxPQUFkLENBQ0gsQ0FwQlksQ0F3QlosVUFBVyxDQUNSLEdBQUksRUFBSixDQUNBLEtBQUtDLE1BQUwsQ0FBYyxhQUE2QixDQUN2QyxHQUFJLEdBQUtWLFNBQVNDLGFBQVQsQ0FBdUIsSUFBdkIsQ0FBVCxDQU9BLE1BTkEsR0FBR0MsU0FBSCxDQUFlLEVBQVEsTUFBUixDQUFpQixNQU1oQyxDQUxBLEVBQUdDLFdBQUgsQ0FBZUgsU0FBU0ksY0FBVCxHQUFmLENBS0EsQ0FKQSxFQUFRRCxXQUFSLEdBSUEsS0FGSSxFQUFHUSxVQUFILENBQWNBLFVBQWQsQ0FBeUJULFNBQXpCLENBQXFDLE1BRXpDLEdBQ0gsQ0FYTyxDQVlSLEtBQUtVLElBQUwsQ0FBWSxhQUF3QixDQUNoQyxFQUFVWixTQUFTSyxjQUFULENBQXdCLFNBQXhCLENBRHNCLENBRWhDLEVBQVUsUUFBbUJGLFdBQW5CLENBQ05ILFNBQVNDLGFBQVQsQ0FBdUIsSUFBdkIsQ0FETSxDQUZzQixDQUtoQyxHQUNILENBQ0osQ0FuQkQsRUF4QmEsQ0E0Q2JPLE9BQU9DLE1BQVAsQ0FBZ0IsVUFBVyxDQUN2QkcsS0FBSyxTQUFMLENBQWdCLFVBQVcsQ0FDdkIsS0FBYSwyQkFBYixDQUR1QixDQUV2QixLQUFhLDRCQUFiLENBRnVCLENBR3ZCLEtBQWEsMkJBQWIsQ0FDSCxDQUpELENBRHVCLENBTXZCQSxLQUFLLGVBQUwsQ0FBc0IsVUFBVSxDQUM1QixLQUFhLHNCQUFiLENBRDRCLENBRTVCLEtBQWEsdUJBQWIsQ0FGNEIsQ0FHNUIsS0FBYSxzQkFBYixDQUNILENBSkQsQ0FOdUIsQ0FXdkJBLEtBQUssZUFBTCxDQUFzQixVQUFVLENBQzVCLEVBQU8sSUFBUCxDQUFhLE1BQWIsQ0FENEIsQ0FFNUIsRUFBTyxDQUFQLENBQVUsTUFBVixDQUNILENBSEQsQ0FJSCxDQTNEWSxDQTZEYkosT0FBT0MsTUFBUCxDQUFnQixVQUFXLENBQ3ZCRyxLQUFLLGVBQUwsQ0FBc0IsVUFBVyxDQUM3QkMsT0FENkIsQ0FFN0JDLFdBQVcsVUFBVyxDQUNsQixLQUFhLHNCQUFiLENBRGtCLENBRWxCQyxRQUNILENBSEQsQ0FHRyxHQUhILENBSUgsQ0FORCxDQUR1QixDQVF2QkgsS0FBSyxlQUFMLENBQXNCLFVBQVUsQ0FDNUJDLE9BRDRCLENBRTVCRyxXQUFXLFVBQVUsQ0FDakIsS0FBYSx1QkFBYixDQURpQixDQUVqQkQsUUFDSCxDQUhELENBR0csR0FISCxDQUlILENBTkQsQ0FPSCxDQTVFWSxDQXVGYixHQUFJLEdBQU8sZUFBWCxDQUNBLEVBRkEsV0FBMkIsQ0FBRSxNQUFPLElBQWEsQ0FFMUMsQ0FBUSxVQUFVLENBQUUsUUFBYyxDQUFsQyxLQUFQLENBQ0ksZ0NBREosQ0FHQyxDQTNGQSxHIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKCkge1xuJ3VzZSBzdHJpY3QnO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLUNBUMONVFVMTyAxLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxudmFyIHggPSAyMTM7XHJcbmNvbnNvbGUubG9nKHgpO1xyXG5cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tQ0FQw41UVUxPIDItLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuZnVuY3Rpb24gYXNzZXJ0KHZhbHVlLCBkZXNjKSB7XHJcbiAgICB2YXIgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIik7XHJcbiAgICBsaS5jbGFzc05hbWUgPSB2YWx1ZSA/IFwicGFzc1wiIDogXCJmYWlsXCI7XHJcbiAgICBsaS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShkZXNjKSk7XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJlc3VsdHNcIikuYXBwZW5kQ2hpbGQobGkpO1xyXG59XHJcblxyXG53aW5kb3cub25sb2FkID0gZnVuY3Rpb24oKSB7XHJcbiAgICBhc3NlcnQodHJ1ZSwgXCJUaGUgdGVzdCBzdWl0ZSBpcyBydW5uaW5nLlwiKTtcclxuICAgIGFzc2VydChmYWxzZSwgXCJGYWlsIVwiKTtcclxufTtcclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbihmdW5jdGlvbigpIHtcclxuICAgIHZhciByZXN1bHRzO1xyXG4gICAgdGhpcy5hc3NlcnQgPSBmdW5jdGlvbiBhc3NlcnQodmFsdWUsIGRlc2MpIHtcclxuICAgICAgICB2YXIgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIik7XHJcbiAgICAgICAgbGkuY2xhc3NOYW1lID0gdmFsdWUgPyBcInBhc3NcIiA6IFwiZmFpbFwiO1xyXG4gICAgICAgIGxpLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGRlc2MpKTtcclxuICAgICAgICByZXN1bHRzLmFwcGVuZENoaWxkKGxpKTtcclxuICAgICAgICBpZiAoIXZhbHVlKSB7XHJcbiAgICAgICAgICAgIGxpLnBhcmVudE5vZGUucGFyZW50Tm9kZS5jbGFzc05hbWUgPSBcImZhaWxcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGxpO1xyXG4gICAgfTtcclxuICAgIHRoaXMudGVzdCA9IGZ1bmN0aW9uIHRlc3QobmFtZSwgZm4pIHtcclxuICAgICAgICByZXN1bHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyZXN1bHRzXCIpO1xyXG4gICAgICAgIHJlc3VsdHMgPSBhc3NlcnQodHJ1ZSwgbmFtZSkuYXBwZW5kQ2hpbGQoXHJcbiAgICAgICAgICAgIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ1bFwiKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgZm4oKTtcclxuICAgIH07ICAgIFxyXG59KSgpO1xyXG53aW5kb3cub25sb2FkID0gZnVuY3Rpb24oKSB7XHJcbiAgICB0ZXN0KFwiQSB0ZXN0LlwiLCBmdW5jdGlvbigpIHtcclxuICAgICAgICBhc3NlcnQodHJ1ZSwgXCJGaXJzdCBhc3NlcnRpb24gY29tcGxldGVkXCIpO1xyXG4gICAgICAgIGFzc2VydCh0cnVlLCBcIlNlY29uZCBhc3NlcnRpb24gY29tcGxldGVkXCIpO1xyXG4gICAgICAgIGFzc2VydCh0cnVlLCBcIlRoaXJkIGFzc2VydGlvbiBjb21wbGV0ZWRcIik7XHJcbiAgICB9KTtcclxuICAgIHRlc3QoXCJBbm90aGVyIHRlc3QuXCIsIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgYXNzZXJ0KHRydWUsIFwiRmlyc3QgdGVzdCBjb21wbGV0ZWRcIik7XHJcbiAgICAgICAgYXNzZXJ0KHRydWUsIFwiU2Vjb25kIHRlc3QgY29tcGxldGVkXCIpO1xyXG4gICAgICAgIGFzc2VydCh0cnVlLCBcIlRoaXJkIHRlc3QgY29tcGxldGVkXCIpO1xyXG4gICAgfSk7XHJcbiAgICB0ZXN0KFwiQSB0aGlyZCB0ZXN0LlwiLCBmdW5jdGlvbigpe1xyXG4gICAgICAgIGFzc2VydChudWxsLCBcImZhaWxcIik7XHJcbiAgICAgICAgYXNzZXJ0KDUsIFwicGFzc1wiKTtcclxuICAgIH0pO1xyXG59O1xyXG5cclxud2luZG93Lm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdGVzdChcIkFzeW5jIFRlc3QgIzFcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcGF1c2UoKTtcclxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBhc3NlcnQodHJ1ZSwgXCJGaXJzdCB0ZXN0IGNvbXBsZXRlZFwiKTtcclxuICAgICAgICAgICAgcmVzdW1lKCk7XHJcbiAgICAgICAgfSwgMTAwMCk7XHJcbiAgICB9KTtcclxuICAgIHRlc3QoXCJBc3luYyBUZXN0ICMyXCIsIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgcGF1c2UoKTtcclxuICAgICAgICBzZXRUaW1lT3V0KGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIGFzc2VydCh0cnVlLCBcIlNlY29uZCB0ZXN0IGNvbXBsZXRlZFwiKTtcclxuICAgICAgICAgICAgcmVzdW1lKCk7XHJcbiAgICAgICAgfSwgMTAwMCk7XHJcbiAgICB9KTtcclxufTtcclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1DQVDDjVRVTE8gMy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vIHZhbHVlcy5zb3J0KGZ1bmN0aW9uKHZhbHVlMSwgdmFsdWUyKXtyZXR1cm4gdmFsdWUyIC0gdmFsdWUxfSk7XHJcblxyXG4vLyBmdW5jdGlvbiBzdGFydHVwKCkge1xyXG4vLyAgICAgLyogZmF6IGFsZ28gbWFyYXZpbGhvc28gKi9cclxuLy8gfVxyXG4vLyB3aW5kb3cubG9hZCA9IHN0YXJ0dXA7XHJcblxyXG4vLyB3aW5kb3cubG9hZCA9IGZ1bmN0aW9uKCl7LyogZmF6IGFsZ28gbWFyYXZpbGhvc28gKi99O1xyXG5mdW5jdGlvbiB1c2VsZXNzKGNhbGxiYWNrKSB7IHJldHVybiBjYWxsYmFjaygpOyB9XHJcbnZhciB0ZXh0ID0gJ0RvbW8gYXJpZ2F0byEnO1xyXG5hc3NlcnQodXNlbGVzcyhmdW5jdGlvbigpeyByZXR1cm4gdGV4dDsgfSkgPT09IHRleHQsXHJcbiAgICBcIlRoZSB1c2VsZXNzIGZ1bmN0aW9uIHdvcmtzISBcIiArIHRleHQpO1xuXG59KCkpO1xuIl19
