"use strict";(function(){"use strict";function a(a,b){var c=document.createElement("li");c.className=a?"pass":"fail",c.appendChild(document.createTextNode(b)),document.getElementById("results").appendChild(c)}console.log(213),window.onload=function(){a(!0,"The test suite is running."),a(!1,"Fail!")};var b=[213,16,2058,54,10,1965,57,9];b.sort(),console.log(b);var b=[213,16,2058,54,10,1965,57,9];b.sort(function(a,b){return b-a})})();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwiYXBwZW5kQ2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsImdldEVsZW1lbnRCeUlkIiwiY29uc29sZSIsImxvZyIsIndpbmRvdyIsIm9ubG9hZCIsInNvcnQiXSwibWFwcGluZ3MiOiJhQUFDLFdBQVksQ0FDYixhQVNBLGVBQTZCLENBQ3pCLEdBQUksR0FBS0EsU0FBU0MsYUFBVCxDQUF1QixJQUF2QixDQUFULENBQ0EsRUFBR0MsU0FBSCxDQUFlLEVBQVEsTUFBUixDQUFpQixNQUZQLENBR3pCLEVBQUdDLFdBQUgsQ0FBZUgsU0FBU0ksY0FBVCxHQUFmLENBSHlCLENBSXpCSixTQUFTSyxjQUFULENBQXdCLFNBQXhCLEVBQW1DRixXQUFuQyxHQUNILENBVkRHLFFBQVFDLEdBQVIsQ0FEUSxHQUNSLENBTGEsQ0FpQmJDLE9BQU9DLE1BQVAsQ0FBZ0IsVUFBVyxDQUN2QixLQUFhLDRCQUFiLENBRHVCLENBRXZCLEtBQWMsT0FBZCxDQUNILENBcEJZLENBbUliLEdBQUksR0FBUyxDQUFFLEdBQUYsQ0FBTyxFQUFQLENBQVcsSUFBWCxDQUFpQixFQUFqQixDQUFxQixFQUFyQixDQUF5QixJQUF6QixDQUErQixFQUEvQixDQUFtQyxDQUFuQyxDQUFiLENBQ0EsRUFBT0MsSUFBUCxFQXBJYSxDQXNJYkosUUFBUUMsR0FBUixHQXRJYSxDQXdJYixHQUFJLEdBQVMsQ0FBRSxHQUFGLENBQU8sRUFBUCxDQUFXLElBQVgsQ0FBaUIsRUFBakIsQ0FBcUIsRUFBckIsQ0FBeUIsSUFBekIsQ0FBK0IsRUFBL0IsQ0FBbUMsQ0FBbkMsQ0FBYixDQUNBLEVBQU9HLElBQVAsQ0FBWSxhQUF3QixDQUFFLE1BQU8sSUFBa0IsQ0FBL0QsQ0FFQyxDQTNJQSxHIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKCkge1xuJ3VzZSBzdHJpY3QnO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLUNBUMONVFVMTyAxLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxudmFyIHggPSAyMTM7XHJcbmNvbnNvbGUubG9nKHgpO1xyXG5cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tQ0FQw41UVUxPIDItLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuZnVuY3Rpb24gYXNzZXJ0KHZhbHVlLCBkZXNjKSB7XHJcbiAgICB2YXIgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIik7XHJcbiAgICBsaS5jbGFzc05hbWUgPSB2YWx1ZSA/IFwicGFzc1wiIDogXCJmYWlsXCI7XHJcbiAgICBsaS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShkZXNjKSk7XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJlc3VsdHNcIikuYXBwZW5kQ2hpbGQobGkpO1xyXG59XHJcblxyXG53aW5kb3cub25sb2FkID0gZnVuY3Rpb24oKSB7XHJcbiAgICBhc3NlcnQodHJ1ZSwgXCJUaGUgdGVzdCBzdWl0ZSBpcyBydW5uaW5nLlwiKTtcclxuICAgIGFzc2VydChmYWxzZSwgXCJGYWlsIVwiKTtcclxufTtcclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbi8vIChmdW5jdGlvbigpIHtcclxuLy8gICAgIHZhciByZXN1bHRzO1xyXG4vLyAgICAgdGhpcy5hc3NlcnQgPSBmdW5jdGlvbiBhc3NlcnQodmFsdWUsIGRlc2MpIHtcclxuLy8gICAgICAgICB2YXIgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIik7XHJcbi8vICAgICAgICAgbGkuY2xhc3NOYW1lID0gdmFsdWUgPyBcInBhc3NcIiA6IFwiZmFpbFwiO1xyXG4vLyAgICAgICAgIGxpLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGRlc2MpKTtcclxuLy8gICAgICAgICByZXN1bHRzLmFwcGVuZENoaWxkKGxpKTtcclxuLy8gICAgICAgICBpZiAoIXZhbHVlKSB7XHJcbi8vICAgICAgICAgICAgIGxpLnBhcmVudE5vZGUucGFyZW50Tm9kZS5jbGFzc05hbWUgPSBcImZhaWxcIjtcclxuLy8gICAgICAgICB9XHJcbi8vICAgICAgICAgcmV0dXJuIGxpO1xyXG4vLyAgICAgfTtcclxuLy8gICAgIHRoaXMudGVzdCA9IGZ1bmN0aW9uIHRlc3QobmFtZSwgZm4pIHtcclxuLy8gICAgICAgICByZXN1bHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyZXN1bHRzXCIpO1xyXG4vLyAgICAgICAgIHJlc3VsdHMgPSBhc3NlcnQodHJ1ZSwgbmFtZSkuYXBwZW5kQ2hpbGQoXHJcbi8vICAgICAgICAgICAgIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ1bFwiKVxyXG4vLyAgICAgICAgICk7XHJcbi8vICAgICAgICAgZm4oKTtcclxuLy8gICAgIH07ICAgIFxyXG4vLyB9KSgpO1xyXG4vLyB3aW5kb3cub25sb2FkID0gZnVuY3Rpb24oKSB7XHJcbi8vICAgICB0ZXN0KFwiQSB0ZXN0LlwiLCBmdW5jdGlvbigpIHtcclxuLy8gICAgICAgICBhc3NlcnQodHJ1ZSwgXCJGaXJzdCBhc3NlcnRpb24gY29tcGxldGVkXCIpO1xyXG4vLyAgICAgICAgIGFzc2VydCh0cnVlLCBcIlNlY29uZCBhc3NlcnRpb24gY29tcGxldGVkXCIpO1xyXG4vLyAgICAgICAgIGFzc2VydCh0cnVlLCBcIlRoaXJkIGFzc2VydGlvbiBjb21wbGV0ZWRcIik7XHJcbi8vICAgICB9KTtcclxuLy8gICAgIHRlc3QoXCJBbm90aGVyIHRlc3QuXCIsIGZ1bmN0aW9uKCl7XHJcbi8vICAgICAgICAgYXNzZXJ0KHRydWUsIFwiRmlyc3QgdGVzdCBjb21wbGV0ZWRcIik7XHJcbi8vICAgICAgICAgYXNzZXJ0KHRydWUsIFwiU2Vjb25kIHRlc3QgY29tcGxldGVkXCIpO1xyXG4vLyAgICAgICAgIGFzc2VydCh0cnVlLCBcIlRoaXJkIHRlc3QgY29tcGxldGVkXCIpO1xyXG4vLyAgICAgfSk7XHJcbi8vICAgICB0ZXN0KFwiQSB0aGlyZCB0ZXN0LlwiLCBmdW5jdGlvbigpe1xyXG4vLyAgICAgICAgIGFzc2VydChudWxsLCBcImZhaWxcIik7XHJcbi8vICAgICAgICAgYXNzZXJ0KDUsIFwicGFzc1wiKVxyXG4vLyAgICAgfSk7XHJcbi8vIH07XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4vLyAoZnVuY3Rpb24oKXtcclxuLy8gICAgIHZhciBxdWV1ZSA9IFtdLCBwYXVzZWQgPSBmYWxzZSwgcmVzdWx0cztcclxuLy8gICAgIHRoaXMudGVzdCA9IGZ1bmN0aW9uKG5hbWUsIGZuKSB7XHJcbi8vICAgICAgICAgcXVldWUucHVzaChmdW5jdGlvbigpe1xyXG4vLyAgICAgICAgICAgICByZXN1bHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyZXN1bHRzXCIpO1xyXG4vLyAgICAgICAgICAgICByZXN1bHRzID0gYXNzZXJ0KHRydWUsIG5hbWUpLmFwcGVuZENoaWxkKFxyXG4vLyAgICAgICAgICAgICAgICAgZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInVsXCIpXHJcbi8vICAgICAgICAgICAgICk7XHJcbi8vICAgICAgICAgICAgIGZuKCk7XHJcbi8vICAgICAgICAgfSk7XHJcbi8vICAgICAgICAgcnVuVGVzdCgpO1xyXG4vLyAgICAgfTtcclxuLy8gICAgIHRoaXMucGF1c2UgPSBmdW5jdGlvbigpIHtcclxuLy8gICAgICAgICBwYXVzZWQgPSB0cnVlO1xyXG4vLyAgICAgfTtcclxuLy8gICAgIHRoaXMucmVzdW1lID0gZnVuY3Rpb24oKSB7XHJcbi8vICAgICAgICAgcGF1c2VkID0gZmFsc2U7XHJcbi8vICAgICAgICAgc2V0VGltZW91dChydW5UZXN0LCAxKTtcclxuLy8gICAgIH07XHJcbi8vICAgICBmdW5jdGlvbiBydW5UZXN0KCkge1xyXG4vLyAgICAgICAgIGlmKCFwYXVzZWQgJiYgcXVldWUubGVuZ3RoKXtcclxuLy8gICAgICAgICAgICAgcXVldWUuc2hpZnQoKSgpO1xyXG4vLyAgICAgICAgICAgICBpZighcGF1c2VkKSB7XHJcbi8vICAgICAgICAgICAgICAgICByZXN1bWUoKTtcclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgIH1cclxuLy8gICAgIH1cclxuLy8gICAgIHRoaXMuYXNzZXJ0ID0gZnVuY3Rpb24gYXNzZXJ0ICh2YWx1ZSwgZGVzYykge1xyXG4vLyAgICAgICAgIHZhciBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaVwiKTtcclxuLy8gICAgICAgICBsaS5jbGFzc05hbWUgPSB2YWx1ZSA/IFwicGFzc1wiIDogXCJmYWlsXCI7XHJcbi8vICAgICAgICAgbGkuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoZGVzYykpO1xyXG4vLyAgICAgICAgIHJlc3VsdHMuYXBwZW5kQ2hpbGQobGkpO1xyXG4vLyAgICAgICAgIGlmICghdmFsdWUpIHtcclxuLy8gICAgICAgICAgICAgbGkucGFyZW50Tm9kZS5wYXJlbnROb2RlLmNsYXNzTmFtZSA9IFwiZmFpbFwiO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgICByZXR1cm4gbGk7XHJcbi8vICAgICB9O1xyXG4vLyB9KTtcclxuLy8gd2luZG93Lm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xyXG4vLyAgICAgdGVzdChcIkFzeW5jIFRlc3QgIzFcIiwgZnVuY3Rpb24oKSB7XHJcbi8vICAgICAgICAgcGF1c2UoKTtcclxuLy8gICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4vLyAgICAgICAgICAgICBhc3NlcnQodHJ1ZSwgXCJGaXJzdCB0ZXN0IGNvbXBsZXRlZFwiKTtcclxuLy8gICAgICAgICAgICAgcmVzdW1lKCk7XHJcbi8vICAgICAgICAgfSwgMTAwMCk7XHJcbi8vICAgICB9KTtcclxuLy8gICAgIHRlc3QoXCJBc3luYyBUZXN0ICMyXCIsIGZ1bmN0aW9uKCl7XHJcbi8vICAgICAgICAgcGF1c2UoKTtcclxuLy8gICAgICAgICBzZXRUaW1lT3V0KGZ1bmN0aW9uKCl7XHJcbi8vICAgICAgICAgICAgIGFzc2VydCh0cnVlLCBcIlNlY29uZCB0ZXN0IGNvbXBsZXRlZFwiKTtcclxuLy8gICAgICAgICAgICAgcmVzdW1lKCk7XHJcbi8vICAgICAgICAgfSwgMTAwMCk7XHJcbi8vICAgICB9KTtcclxuLy8gfTtcclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1DQVDDjVRVTE8gMy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vIHZhbHVlcy5zb3J0KGZ1bmN0aW9uKHZhbHVlMSwgdmFsdWUyKXtyZXR1cm4gdmFsdWUyIC0gdmFsdWUxfSk7XHJcblxyXG4vLyBmdW5jdGlvbiBzdGFydHVwKCkge1xyXG4vLyAgICAgLyogZmF6IGFsZ28gbWFyYXZpbGhvc28gKi9cclxuLy8gfVxyXG4vLyB3aW5kb3cubG9hZCA9IHN0YXJ0dXA7XHJcblxyXG4vLyB3aW5kb3cubG9hZCA9IGZ1bmN0aW9uKCl7LyogZmF6IGFsZ28gbWFyYXZpbGhvc28gKi99O1xyXG4vLyBmdW5jdGlvbiB1c2VsZXNzKGNhbGxiYWNrKSB7IHJldHVybiBjYWxsYmFjaygpOyB9XHJcbi8vIHZhciB0ZXh0ID0gJ0RvbW8gYXJpZ2F0byEnO1xyXG4vLyBhc3NlcnQodXNlbGVzcyhmdW5jdGlvbigpeyByZXR1cm4gdGV4dDsgfSkgPT09IHRleHQsXHJcbi8vICAgICBcIlRoZSB1c2VsZXNzIGZ1bmN0aW9uIHdvcmtzISBcIiArIHRleHQpO1xyXG5cclxudmFyIHZhbHVlcyA9IFsgMjEzLCAxNiwgMjA1OCwgNTQsIDEwLCAxOTY1LCA1NywgOSBdO1xyXG52YWx1ZXMuc29ydCgpO1xyXG5cclxuY29uc29sZS5sb2codmFsdWVzKTtcclxuXHJcbnZhciB2YWx1ZXMgPSBbIDIxMywgMTYsIDIwNTgsIDU0LCAxMCwgMTk2NSwgNTcsIDkgXTtcclxudmFsdWVzLnNvcnQoZnVuY3Rpb24odmFsdWUxLCB2YWx1ZTIpeyByZXR1cm4gdmFsdWUyIC0gdmFsdWUxOyB9KTtcblxufSgpKTtcbiJdfQ==
